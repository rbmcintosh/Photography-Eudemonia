'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

require('babel-polyfill');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _imagemin = require('imagemin');

var _imagemin2 = _interopRequireDefault(_imagemin);

var _imageminMozjpeg = require('imagemin-mozjpeg');

var _imageminMozjpeg2 = _interopRequireDefault(_imageminMozjpeg);

var _imageminPngquant = require('imagemin-pngquant');

var _imageminPngquant2 = _interopRequireDefault(_imageminPngquant);

var _imageminSvgo = require('imagemin-svgo');

var _imageminSvgo2 = _interopRequireDefault(_imageminSvgo);

var _isPlainObject = require('is-plain-object');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _isGlob = require('is-glob');

var _isGlob2 = _interopRequireDefault(_isGlob);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULTS = {
  base: process.cwd(),
  src: './src/**/*.{jpg|png|svg|jpeg}',
  dest: './dist',
  jpg: {
    quality: '90'
  },
  png: {
    quality: '65-80',
    speed: 4
  },
  svg: {
    plugins: [{
      removeTitle: true,
      removeDesc: true,
      removeXMLNS: true
    }]
  }
};

var getPath = function getPath(base, filepath) {
  if (_path2.default.isAbsolute(filepath)) {
    return filepath;
  }
  return _path2.default.resolve(base, filepath);
};

var getPaths = function getPaths(object) {
  var settings = Object.assign({}, {
    base: DEFAULTS.base,
    src: DEFAULTS.src,
    dest: DEFAULTS.dest
  }, object);
  var src = getPath(settings.base, settings.src);
  var dest = getPath(settings.base, settings.dest);

  if (!(0, _isGlob2.default)(src) && !_fs2.default.existsSync(src)) {
    throw new ReferenceError('Provided source (' + src + ') does not exist.');
  }

  if ((0, _isGlob2.default)(dest) || _path2.default.extname(dest)) {
    throw new ReferenceError('Your destination path cannot be a file or glob pattern.');
  }

  if (!_path2.default.extname(src)) {
    src = _path2.default.join(src, '*');
  }

  return [src, dest];
};

var compress = function compress() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (!(0, _isPlainObject2.default)(options)) {
    throw new TypeError('Given options are not an object.');
  }

  var settings = Object.assign({}, DEFAULTS, options);

  var _getPaths = getPaths(settings),
      _getPaths2 = _slicedToArray(_getPaths, 2),
      src = _getPaths2[0],
      dest = _getPaths2[1];

  return new Promise(function (resolve, reject) {
    (0, _imagemin2.default)([src], dest, {
      plugins: [(0, _imageminMozjpeg2.default)(settings.jpg), (0, _imageminPngquant2.default)(settings.png), (0, _imageminSvgo2.default)(settings.svg)]
    }).then(function (files) {
      resolve(files.map(function (file) {
        return file.path;
      }));
    }).catch(function (error) {
      reject(error);
    });
  }).catch(function (error) {
    throw error;
  });
};

module.exports.getPaths = getPaths;
module.exports.compress = compress;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJERUZBVUxUUyIsImJhc2UiLCJwcm9jZXNzIiwiY3dkIiwic3JjIiwiZGVzdCIsImpwZyIsInF1YWxpdHkiLCJwbmciLCJzcGVlZCIsInN2ZyIsInBsdWdpbnMiLCJyZW1vdmVUaXRsZSIsInJlbW92ZURlc2MiLCJyZW1vdmVYTUxOUyIsImdldFBhdGgiLCJmaWxlcGF0aCIsImlzQWJzb2x1dGUiLCJyZXNvbHZlIiwiZ2V0UGF0aHMiLCJvYmplY3QiLCJzZXR0aW5ncyIsIk9iamVjdCIsImFzc2lnbiIsImV4aXN0c1N5bmMiLCJSZWZlcmVuY2VFcnJvciIsImV4dG5hbWUiLCJqb2luIiwiY29tcHJlc3MiLCJvcHRpb25zIiwiVHlwZUVycm9yIiwiUHJvbWlzZSIsInJlamVjdCIsInRoZW4iLCJmaWxlcyIsIm1hcCIsImZpbGUiLCJwYXRoIiwiY2F0Y2giLCJlcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFNQSxXQUFXO0FBQ2ZDLFFBQU1DLFFBQVFDLEdBQVIsRUFEUztBQUVmQyxPQUFLLCtCQUZVO0FBR2ZDLFFBQU0sUUFIUztBQUlmQyxPQUFLO0FBQ0hDLGFBQVM7QUFETixHQUpVO0FBT2ZDLE9BQUs7QUFDSEQsYUFBUyxPQUROO0FBRUhFLFdBQU87QUFGSixHQVBVO0FBV2ZDLE9BQUs7QUFDSEMsYUFBUyxDQUFDO0FBQ1JDLG1CQUFhLElBREw7QUFFUkMsa0JBQVksSUFGSjtBQUdSQyxtQkFBYTtBQUhMLEtBQUQ7QUFETjtBQVhVLENBQWpCOztBQW9CQSxJQUFNQyxVQUFVLFNBQVNBLE9BQVQsQ0FBaUJkLElBQWpCLEVBQXVCZSxRQUF2QixFQUFpQztBQUMvQyxNQUFJLGVBQUtDLFVBQUwsQ0FBZ0JELFFBQWhCLENBQUosRUFBK0I7QUFDN0IsV0FBT0EsUUFBUDtBQUNEO0FBQ0QsU0FBTyxlQUFLRSxPQUFMLENBQWFqQixJQUFiLEVBQW1CZSxRQUFuQixDQUFQO0FBQ0QsQ0FMRDs7QUFPQSxJQUFNRyxXQUFXLFNBQVNBLFFBQVQsQ0FBa0JDLE1BQWxCLEVBQTBCO0FBQ3pDLE1BQU1DLFdBQVdDLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCO0FBQ2pDdEIsVUFBTUQsU0FBU0MsSUFEa0I7QUFFakNHLFNBQUtKLFNBQVNJLEdBRm1CO0FBR2pDQyxVQUFNTCxTQUFTSztBQUhrQixHQUFsQixFQUlkZSxNQUpjLENBQWpCO0FBS0EsTUFBSWhCLE1BQU1XLFFBQVFNLFNBQVNwQixJQUFqQixFQUF1Qm9CLFNBQVNqQixHQUFoQyxDQUFWO0FBQ0EsTUFBTUMsT0FBT1UsUUFBUU0sU0FBU3BCLElBQWpCLEVBQXVCb0IsU0FBU2hCLElBQWhDLENBQWI7O0FBRUEsTUFBSSxDQUFDLHNCQUFPRCxHQUFQLENBQUQsSUFBZ0IsQ0FBQyxhQUFHb0IsVUFBSCxDQUFjcEIsR0FBZCxDQUFyQixFQUF5QztBQUN2QyxVQUFNLElBQUlxQixjQUFKLHVCQUF1Q3JCLEdBQXZDLHVCQUFOO0FBQ0Q7O0FBRUQsTUFBSSxzQkFBT0MsSUFBUCxLQUFnQixlQUFLcUIsT0FBTCxDQUFhckIsSUFBYixDQUFwQixFQUF3QztBQUN0QyxVQUFNLElBQUlvQixjQUFKLENBQW1CLHlEQUFuQixDQUFOO0FBQ0Q7O0FBRUQsTUFBSSxDQUFDLGVBQUtDLE9BQUwsQ0FBYXRCLEdBQWIsQ0FBTCxFQUF3QjtBQUN0QkEsVUFBTSxlQUFLdUIsSUFBTCxDQUFVdkIsR0FBVixFQUFlLEdBQWYsQ0FBTjtBQUNEOztBQUVELFNBQU8sQ0FBQ0EsR0FBRCxFQUFNQyxJQUFOLENBQVA7QUFDRCxDQXRCRDs7QUF3QkEsSUFBTXVCLFdBQVcsU0FBU0EsUUFBVCxHQUFnQztBQUFBLE1BQWRDLE9BQWMsdUVBQUosRUFBSTs7QUFDL0MsTUFBSSxDQUFDLDZCQUFjQSxPQUFkLENBQUwsRUFBNkI7QUFDM0IsVUFBTSxJQUFJQyxTQUFKLENBQWMsa0NBQWQsQ0FBTjtBQUNEOztBQUVELE1BQU1ULFdBQVdDLE9BQU9DLE1BQVAsQ0FBYyxFQUFkLEVBQWtCdkIsUUFBbEIsRUFBNEI2QixPQUE1QixDQUFqQjs7QUFMK0Msa0JBTTNCVixTQUFTRSxRQUFULENBTjJCO0FBQUE7QUFBQSxNQU14Q2pCLEdBTndDO0FBQUEsTUFNbkNDLElBTm1DOztBQVEvQyxTQUFPLElBQUkwQixPQUFKLENBQVksVUFBQ2IsT0FBRCxFQUFVYyxNQUFWLEVBQXFCO0FBQ3RDLDRCQUFTLENBQUM1QixHQUFELENBQVQsRUFBZ0JDLElBQWhCLEVBQXNCO0FBQ3BCTSxlQUFTLENBQ1AsK0JBQWdCVSxTQUFTZixHQUF6QixDQURPLEVBRVAsZ0NBQWlCZSxTQUFTYixHQUExQixDQUZPLEVBR1AsNEJBQWFhLFNBQVNYLEdBQXRCLENBSE87QUFEVyxLQUF0QixFQU1HdUIsSUFOSCxDQU1RLGlCQUFTO0FBQ2ZmLGNBQVFnQixNQUFNQyxHQUFOLENBQVU7QUFBQSxlQUFRQyxLQUFLQyxJQUFiO0FBQUEsT0FBVixDQUFSO0FBQ0QsS0FSRCxFQVFHQyxLQVJILENBUVMsaUJBQVM7QUFDaEJOLGFBQU9PLEtBQVA7QUFDRCxLQVZEO0FBV0QsR0FaTSxFQVlKRCxLQVpJLENBWUUsaUJBQVM7QUFDaEIsVUFBTUMsS0FBTjtBQUNELEdBZE0sQ0FBUDtBQWVELENBdkJEOztBQXlCQUMsT0FBT0MsT0FBUCxDQUFldEIsUUFBZixHQUEwQkEsUUFBMUI7QUFDQXFCLE9BQU9DLE9BQVAsQ0FBZWIsUUFBZixHQUEwQkEsUUFBMUIiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCAnYmFiZWwtcG9seWZpbGwnXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IGZzIGZyb20gJ2ZzJ1xuaW1wb3J0IGltYWdlbWluIGZyb20gJ2ltYWdlbWluJ1xuaW1wb3J0IGltYWdlbWluTW96anBlZyBmcm9tICdpbWFnZW1pbi1tb3pqcGVnJ1xuaW1wb3J0IGltYWdlbWluUG5ncXVhbnQgZnJvbSAnaW1hZ2VtaW4tcG5ncXVhbnQnXG5pbXBvcnQgaW1hZ2VtaW5TdmdvIGZyb20gJ2ltYWdlbWluLXN2Z28nXG5pbXBvcnQgaXNQbGFpbk9iamVjdCBmcm9tICdpcy1wbGFpbi1vYmplY3QnXG5pbXBvcnQgaXNHbG9iIGZyb20gJ2lzLWdsb2InXG5cbmNvbnN0IERFRkFVTFRTID0ge1xuICBiYXNlOiBwcm9jZXNzLmN3ZCgpLFxuICBzcmM6ICcuL3NyYy8qKi8qLntqcGd8cG5nfHN2Z3xqcGVnfScsXG4gIGRlc3Q6ICcuL2Rpc3QnLFxuICBqcGc6IHtcbiAgICBxdWFsaXR5OiAnOTAnLFxuICB9LFxuICBwbmc6IHtcbiAgICBxdWFsaXR5OiAnNjUtODAnLFxuICAgIHNwZWVkOiA0LFxuICB9LFxuICBzdmc6IHtcbiAgICBwbHVnaW5zOiBbe1xuICAgICAgcmVtb3ZlVGl0bGU6IHRydWUsXG4gICAgICByZW1vdmVEZXNjOiB0cnVlLFxuICAgICAgcmVtb3ZlWE1MTlM6IHRydWUsXG4gICAgfV0sXG4gIH0sXG59XG5cbmNvbnN0IGdldFBhdGggPSBmdW5jdGlvbiBnZXRQYXRoKGJhc2UsIGZpbGVwYXRoKSB7XG4gIGlmIChwYXRoLmlzQWJzb2x1dGUoZmlsZXBhdGgpKSB7XG4gICAgcmV0dXJuIGZpbGVwYXRoXG4gIH1cbiAgcmV0dXJuIHBhdGgucmVzb2x2ZShiYXNlLCBmaWxlcGF0aClcbn1cblxuY29uc3QgZ2V0UGF0aHMgPSBmdW5jdGlvbiBnZXRQYXRocyhvYmplY3QpIHtcbiAgY29uc3Qgc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCB7XG4gICAgYmFzZTogREVGQVVMVFMuYmFzZSxcbiAgICBzcmM6IERFRkFVTFRTLnNyYyxcbiAgICBkZXN0OiBERUZBVUxUUy5kZXN0LFxuICB9LCBvYmplY3QpXG4gIGxldCBzcmMgPSBnZXRQYXRoKHNldHRpbmdzLmJhc2UsIHNldHRpbmdzLnNyYylcbiAgY29uc3QgZGVzdCA9IGdldFBhdGgoc2V0dGluZ3MuYmFzZSwgc2V0dGluZ3MuZGVzdClcblxuICBpZiAoIWlzR2xvYihzcmMpICYmICFmcy5leGlzdHNTeW5jKHNyYykpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoYFByb3ZpZGVkIHNvdXJjZSAoJHtzcmN9KSBkb2VzIG5vdCBleGlzdC5gKVxuICB9XG5cbiAgaWYgKGlzR2xvYihkZXN0KSB8fCBwYXRoLmV4dG5hbWUoZGVzdCkpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoJ1lvdXIgZGVzdGluYXRpb24gcGF0aCBjYW5ub3QgYmUgYSBmaWxlIG9yIGdsb2IgcGF0dGVybi4nKVxuICB9XG5cbiAgaWYgKCFwYXRoLmV4dG5hbWUoc3JjKSkge1xuICAgIHNyYyA9IHBhdGguam9pbihzcmMsICcqJylcbiAgfVxuXG4gIHJldHVybiBbc3JjLCBkZXN0XVxufVxuXG5jb25zdCBjb21wcmVzcyA9IGZ1bmN0aW9uIGNvbXByZXNzKG9wdGlvbnMgPSB7fSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3Qob3B0aW9ucykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdHaXZlbiBvcHRpb25zIGFyZSBub3QgYW4gb2JqZWN0LicpXG4gIH1cblxuICBjb25zdCBzZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRTLCBvcHRpb25zKVxuICBjb25zdCBbc3JjLCBkZXN0XSA9IGdldFBhdGhzKHNldHRpbmdzKVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaW1hZ2VtaW4oW3NyY10sIGRlc3QsIHtcbiAgICAgIHBsdWdpbnM6IFtcbiAgICAgICAgaW1hZ2VtaW5Nb3pqcGVnKHNldHRpbmdzLmpwZyksXG4gICAgICAgIGltYWdlbWluUG5ncXVhbnQoc2V0dGluZ3MucG5nKSxcbiAgICAgICAgaW1hZ2VtaW5TdmdvKHNldHRpbmdzLnN2ZyksXG4gICAgICBdLFxuICAgIH0pLnRoZW4oZmlsZXMgPT4ge1xuICAgICAgcmVzb2x2ZShmaWxlcy5tYXAoZmlsZSA9PiBmaWxlLnBhdGgpKVxuICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIHJlamVjdChlcnJvcilcbiAgICB9KVxuICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgdGhyb3cgZXJyb3JcbiAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMuZ2V0UGF0aHMgPSBnZXRQYXRoc1xubW9kdWxlLmV4cG9ydHMuY29tcHJlc3MgPSBjb21wcmVzc1xuIl19